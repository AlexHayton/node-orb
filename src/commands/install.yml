description: >
  Install Node.js in any executor environment (Docker/Linux, macOS,
  machine) that does not have it preinstalled

parameters:
  version:
    type: string
    default: latest
    description: >
      Specific version of Node.js to install. Note: version-selection is
      not supported for Alpine Linux-based execution environments, as
      Node.js's Linux binaries are not compiled to run on Alpine. Use the
      `alpine-version` parameter to select from a limited number of
      Alpine-based Node.js packages. Otherwise, for a full list of
      releases, see the following: https://nodejs.org/en/download/releases

  alpine-version:
    type: enum
    default: nodejs-current
    enum: [nodejs, nodejs-current]
    description: >
      For Alpine Linux users, select a Node.js version: either a current
      stable release, or a slightly older stable release. For more
      information, see https://pkgs.alpinelinux.org/packages?name=nodejs*

  install-dir:
    type: string
    default: /usr/local/bin
    description: >
      Where should Node.js be installed?

steps:
  - run:
      name: Install Node.js
      command: |
        # PLATFORM CHECK: mac vs. alpine vs. other linux
        PLATFORM=linux
        if uname -a | grep Darwin > /dev/null 2>&1; then
          PLATFORM=darwin
        elif cat /etc/issue | grep Alpine > /dev/null 2>&1; then
          PLATFORM=alpine
        fi

        # FUNCTIONS
        get_node_version () {
          if [[ <<parameters.version>> == latest ]]; then
            VERSION=$(curl --silent --show-error \
              --location --fail --retry 3 \
              https://api.github.com/repos/nodejs/node/releases/latest | \
              grep tag_name | cut -d '"' -f 4 | \
              cut -d 'v' -f 2)

            echo "Latest version of Node.js is $VERSION"
          else
            VERSION=<<parameters.version>>

            echo "Selected version of Node.js is $VERSION"
          fi
        }

        installation_check () {
          if command -v node > /dev/null 2>&1; then
            if node --version | grep "$VERSION" > /dev/null 2>&1; then

              echo "Node.js $VERSION is already installed"
              exit 0
            else
              echo "A different version of Node.js is installed ($(node --version)); removing it"

              $SUDO rm -f "$(command -v node)"
              $SUDO rm -rf "$(command -v node | sed -E 's|node||')/nodejs"
            fi
          fi
        }

        # DOWNLOAD/INSTALL LOGIC
        if [[ "$PLATFORM" == alpine ]]; then
          if [[ <<parameters.alpine-version>> == nodejs ]]; then
            APK_REPO=main
          elif [[ <<parameters.alpine-version>> == nodejs-current ]]; then
            APK_REPO=community
          fi

          VERSION=$(curl \
            --silent --show-error --location --fail --retry 3 \
            "http://dl-cdn.alpinelinux.org/alpine/edge/$APK_REPO/x86_64/" | \
            grep nodejs | grep -E -v '(dev|doc)' | \
            sed -E 's%<a href="%%' | sed -E 's%.apk">nodejs-.*.apk</a>.*%%' | \
            sed -E 's/(nodejs-|nodejs-current-)//' | sed -E 's/-r0//')

          echo "Selected version of Node.js is: $VERSION (Alpine APK)"

          installation_check

          # https://wiki.alpinelinux.org/wiki/Include:Upgrading_to_Edge
          sed -i -e 's/v[[:digit:]]\.[[:digit:]]/edge/g' /etc/apk/repositories
          apk upgrade --update-cache --available > /dev/null 2>&1

          # https://wiki.alpinelinux.org/wiki/Enable_Community_Repository
          if cat /etc/apk/repositories | grep -v community > /dev/null 2>&1; then
            echo -e "http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
          fi

          apk --no-cache add libuv
          apk --no-cache add --repository \
            "http://dl-cdn.alpinelinux.org/alpine/edge/$APK_REPO" \
            <<parameters.alpine-version>> \
            > /dev/null 2>&1
        else
          get_node_version

          if [[ $EUID == 0 ]]; then export SUDO=""; else export SUDO="sudo"; fi

          # download/install node
          $SUDO curl -O \
            --silent --show-error --location --fail --retry 3 \
              "https://nodejs.org/dist/v$VERSION/node-v$VERSION-$PLATFORM-x64.tar.gz"

          # download shasum256
          $SUDO curl -O \
            --silent --show-error --location --fail --retry 3 \
            "https://nodejs.org/dist/v$VERSION/SHASUMS256.txt"

          # verify shasum256 via gpg
          $SUDO curl -O \
            --silent --show-error --location --fail --retry 3 \
            "https://nodejs.org/dist/v$VERSION/SHASUMS256.txt.sig"

          $SUDO curl \
            --silent --show-error --location --fail --retry 3 \
            https://raw.githubusercontent.com/nodejs/node/master/README.md | \
            grep -E '[A-Z0-9]{40}' | \
            sed -E 's/gpg --keyserver pool.sks-keyservers.net --recv-keys //g' | \
            sed -E 's/(`|\$ )//g' > \
            NODEJS_TRUSTED_RELEASE_KEYS

          while read key; do
            gpg --keyserver pool.sks-keyservers.net --recv-keys "$key"
          done < NODEJS_TRUSTED_RELEASE_KEYS

          $SUDO rm -f NODEJS_TRUSTED_RELEASE_KEYS

          gpg --verify SHASUMS256.txt.sig SHASUMS256.txt

          # verify node tar via shasum256
          grep "node-v$VERSION-$PLATFORM-x64.tar.gz" SHASUMS256.txt | sha256sum -c -

          # setup node.js installation
          $SUDO mkdir -p <<parameters.install-dir>>/nodejs

          $SUDO tar -xzf "node-v$VERSION-$PLATFORM-x64.tar.gz" -C <<parameters.install-dir>>/nodejs
        fi

        # verify version
        echo "Node.js $(node --version) has been installed to $(which node)"
